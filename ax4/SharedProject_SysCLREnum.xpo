Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics Class: SysCLREnum unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysCLREnum
    PROPERTIES
      Name                #SysCLREnum
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysCLREnum
        #//
        #// класс-обертка для System.Enum
        #// https://docs.microsoft.com/en-us/dotnet/api/system.enum
        #class SysCLREnum implements Enumerable
        #{
        #    System.Enum enum;
        #}
        #
      ENDSOURCE
      SOURCE #enum
        #public System.Enum enum()
        #{
        #    return enum;
        #}
      ENDSOURCE
      SOURCE #equal
        #public boolean equal(Object other)
        #{
        #    boolean       ret;
        #    System.Enum   thisEnum = this.enum();
        #    System.Object otherObject;
        #    ;
        #
        #    if( SysDictClass::is(other, classnum(CLRObject)) )
        #    {
        #        otherObject = other;
        #    }
        #    else if( SysDictClass::is(other, classnum(SysCLREnum)) )
        #    {
        #        otherObject = other.enum();
        #    }
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = thisEnum.Equals(otherObject);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getName
        #public str getName(int value = this.getValue())
        #{
        #    str ret;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = System.Enum::GetName(enum.GetType(), value);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getNames
        #public container getNames()
        #{
        #    container       ret;
        #    System.Array    arr;
        #    System.Object   value;
        #    int             lowerBound;
        #    int             upperBound;
        #    int             i;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    arr = System.Enum::GetNames(enum.GetType());
        #    lowerBound = arr.GetLowerBound(0);
        #    upperBound = arr.GetUpperBound(0);
        #
        #    for( i = lowerBound; i <= upperBound; i++ )
        #    {
        #        value = arr.GetValue(i);
        #        ret += CLRInterop::getAnyTypeForObject(value);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getValue
        #public int getValue()
        #{
        #    int ret;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = System.Convert::ToInt32(enum);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getValues
        #public container getValues()
        #{
        #    container       ret;
        #    System.Array    arr;
        #    System.Object   value;
        #    int             lowerBound;
        #    int             upperBound;
        #    int             i;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    arr = System.Enum::GetValues(enum.GetType());
        #    lowerBound = arr.GetLowerBound(0);
        #    upperBound = arr.GetUpperBound(0);
        #
        #    for( i = lowerBound; i <= upperBound; i++ )
        #    {
        #        value = arr.GetValue(i);
        #        ret += CLRInterop::getAnyTypeForObject(value);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isDefined
        #public boolean isDefined(anytype valueOrName)
        #{
        #    boolean         ret;
        #    System.Object   clrValueOrName = CLRInterop::getObjectForAnyType(valueOrName);
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = System.Enum::IsDefined(enum.GetType(), clrValueOrName);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(System.Enum _enum)
        #{
        #    if( CLRInterop::isNull(_enum) )
        #        throw error(Error::wrongUseOfFunction(funcname()));
        #
        #    enum = _enum;
        #}
      ENDSOURCE
      SOURCE #toString
        #public str toString(str format = 'G')
        #{
        #    str ret;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = enum.ToString(format);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #contsruct
        #public static SysCLREnum contsruct(System.Enum enum)
        #{
        #    SysCLREnum ret = new SysCLREnum(enum);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #format
        #public static str format(System.Enum enum, str format = 'G')
        #{
        #    str ret;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = System.Enum::Format(enum.GetType(), enum, format);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fromIdx
        #// Внимание! Всегда запрашивает все значения enum. Потенциально медленный метод.
        #// нумерация с нуля
        #public static System.Enum fromIdx(System.Type enumType, int idx = 0)
        #{
        #    System.Enum   ret;
        #    System.Array  arr;
        #    System.Object value;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    arr   = System.Enum::GetValues(enumType);
        #    idx  += CLRInterop::getAnyTypeForObject(arr.GetLowerBound(0));
        #    value = arr.GetValue(idx);
        #    ret   = System.Enum::ToObject(enumType, value);
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #fromName
        #public static System.Enum fromName(System.Type enumType, str name)
        #{
        #    return SysCLREnum::parse(enumType, name);
        #}
      ENDSOURCE
      SOURCE #fromValue
        #public static System.Enum fromValue(System.Type enumType, int value)
        #{
        #    System.Enum ret;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    if( !System.Enum::IsDefined(enumType, value) )
        #        throw error(strfmt('Value %1 is not defined for Enum %2', value, CLRInterop::getAnyTypeForObject(enumType.get_FullName())));
        #
        #    ret = System.Enum::ToObject(enumType, value);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #name
        #public static str name(System.Enum enum)
        #{
        #    str ret;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = System.Enum::GetName(enum.GetType(), enum);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #newFromIdx
        #public static SysCLREnum newFromIdx(System.Type enumType, int idx = 0)
        #{
        #    System.Object obj  = SysCLREnum::fromIdx(enumType, idx);
        #    System.Enum   enum = obj;
        #    SysCLREnum    ret  = SysCLREnum::contsruct(enum);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #newFromName
        #public static SysCLREnum newFromName(System.Type enumType, str name, boolean ignoreCase = true)
        #{
        #    System.Object obj  = SysCLREnum::parse(enumType, name, true);
        #    System.Enum   enum = obj;
        #    SysCLREnum    ret  = SysCLREnum::contsruct(enum);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #newFromValue
        #public static SysCLREnum newFromValue(System.Type enumType, int value)
        #{
        #    System.Object obj = SysCLREnum::fromValue(enumType, value);
        #    System.Enum   enum = obj;
        #    SysCLREnum    ret  = SysCLREnum::contsruct(enum);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #parse
        #public static System.Enum parse(System.Type enumType, str nameOrValue, boolean ignoreCase = true)
        #{
        #    System.Enum enum;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    enum = System.Enum::Parse(enumType, nameOrValue, ignoreCase);
        #
        #    return enum;
        #}
      ENDSOURCE
      SOURCE #value
        #public static int value(System.Enum enum)
        #{
        #    int ret;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = System.Convert::ToInt32(enum);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getEnumerator
        #public SysCLREnumEnumerator getEnumerator()
        #{
        #    SysCLREnumEnumerator enumerator = SysCLREnumEnumerator::construct(this);
        #
        #    return enumerator;
        #}
      ENDSOURCE
      SOURCE #type
        #public System.Type type()
        #{
        #    System.Type type = enum.GetType();
        #
        #    return type;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics Class: SysCLREnumTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysCLREnumTest
    PROPERTIES
      Name                #SysCLREnumTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysCLREnum
        #//
        #class SysCLREnumTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testConstruct
        #void testConstruct()
        #{
        #    SysCLREnum enum = SysCLREnum::contsruct(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #}
      ENDSOURCE
      SOURCE #testConstruct_NotEnum
        #void testConstruct_NotEnum()
        #{
        #    System.Object obj;
        #    ;
        #
        #    this.parmExceptionExpected(true);
        #    SysCLREnum::contsruct(obj);
        #}
      ENDSOURCE
      SOURCE #testConstruct_Null
        #void testConstruct_Null()
        #{
        #    this.parmExceptionExpected(true);
        #    SysCLREnum::contsruct(null);
        #}
      ENDSOURCE
      SOURCE #testEnum
        #void testEnum()
        #{
        #    System.TypeCode expected = CLRInterop::parseClrEnum('System.TypeCode','Boolean');
        #    System.TypeCode actual   = SysCLREnum::contsruct(expected).enum();
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    this.assertTrue(actual.Equals(expected));
        #}
      ENDSOURCE
      SOURCE #testEqual_SysCLREnum
        #void testEqual_SysCLREnum()
        #{
        #    SysCLREnum  expected = SysCLREnum::contsruct(CLRInterop::parseClrEnum('System.TypeCode','Boolean'));
        #    SysCLREnum  typeCode = SysCLREnum::contsruct(expected.enum());
        #    ;
        #
        #    this.assertTrue(typeCode.equal(expected));
        #}
      ENDSOURCE
      SOURCE #testEqual_SysCLREnum_NotEqual
        #void testEqual_SysCLREnum_NotEqual()
        #{
        #    SysCLREnum  expected = SysCLREnum::contsruct(CLRInterop::parseClrEnum('System.TypeCode','Boolean'));
        #    SysCLREnum  typeCode = SysCLREnum::contsruct(CLRInterop::parseClrEnum('System.TypeCode','Byte'));
        #    ;
        #
        #    this.assertFalse(typeCode.equal(expected));
        #}
      ENDSOURCE
      SOURCE #testEqual_SystemEnum
        #void testEqual_SystemEnum()
        #{
        #    System.TypeCode expected = CLRInterop::parseClrEnum('System.TypeCode','Boolean');
        #    SysCLREnum      typeCode = SysCLREnum::contsruct(expected);
        #    ;
        #
        #    this.assertTrue(typeCode.equal(expected));
        #}
      ENDSOURCE
      SOURCE #testEqual_SystemEnum_NotEqual
        #void testEqual_SystemEnum_NotEqual()
        #{
        #    System.TypeCode expected = CLRInterop::parseClrEnum('System.TypeCode','Boolean');
        #    SysCLREnum      typeCode = SysCLREnum::contsruct(CLRInterop::parseClrEnum('System.TypeCode','Byte'));
        #    ;
        #
        #    this.assertFalse(typeCode.equal(expected));
        #}
      ENDSOURCE
      SOURCE #testFormat
        #void testFormat()
        #{
        #    this.assertEquals('Byte', SysCLREnum::format(CLRInterop::parseClrEnum('System.TypeCode','Byte')));
        #}
      ENDSOURCE
      SOURCE #testFormatD
        #void testFormatD()
        #{
        #    this.assertEquals('6', SysCLREnum::format(CLRInterop::parseClrEnum('System.TypeCode','Byte'),'D'));
        #}
      ENDSOURCE
      SOURCE #testFormatG
        #void testFormatG()
        #{
        #    this.assertEquals('Byte', SysCLREnum::format(CLRInterop::parseClrEnum('System.TypeCode','Byte'),'G'));
        #}
      ENDSOURCE
      SOURCE #testFormatX
        #void testFormatX()
        #{
        #    this.assertEquals('00000006', SysCLREnum::format(CLRInterop::parseClrEnum('System.TypeCode','Byte'),'X'));
        #}
      ENDSOURCE
      SOURCE #testFromIdx_NotValid
        #void testFromIdx_NotValid()
        #{
        #    System.TypeCode typeCode = CLRInterop::parseClrEnum('System.TypeCode','Empty');
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    this.parmExceptionExpected(true);
        #    SysCLREnum::fromIdx(typeCode.GetType(), 42);
        #}
      ENDSOURCE
      SOURCE #testFromIdx_Valid
        #void testFromIdx_Valid()
        #{
        #    System.TypeCode typeCode = CLRInterop::parseClrEnum('System.TypeCode','Empty');
        #    System.TypeCode expected = CLRInterop::parseClrEnum('System.TypeCode','Boolean');
        #    System.Object   actual;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    actual = SysCLREnum::fromIdx(typeCode.GetType(), 3);
        #
        #    this.assertTrue(actual.Equals(expected));
        #}
      ENDSOURCE
      SOURCE #testFromName_NotValid
        #void testFromName_NotValid()
        #{
        #    System.TypeCode typeCode = CLRInterop::parseClrEnum('System.TypeCode','Empty');
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    this.parmExceptionExpected(true);
        #    SysCLREnum::fromName(typeCode.GetType(), 'bla-bla-bla');
        #}
      ENDSOURCE
      SOURCE #testFromName_Valid
        #void testFromName_Valid()
        #{
        #    System.TypeCode typeCode = CLRInterop::parseClrEnum('System.TypeCode','Empty');
        #    System.TypeCode expected = CLRInterop::parseClrEnum('System.TypeCode','Boolean');
        #    System.Object   actual;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    actual = SysCLREnum::fromName(typeCode.GetType(), 'Boolean');
        #
        #    this.assertTrue(actual.Equals(expected));
        #}
      ENDSOURCE
      SOURCE #testFromValue_NotValid
        #void testFromValue_NotValid()
        #{
        #    System.TypeCode typeCode = CLRInterop::parseClrEnum('System.TypeCode','Empty');
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    this.parmExceptionExpected(true);
        #    SysCLREnum::fromValue(typeCode.GetType(), 42);
        #}
      ENDSOURCE
      SOURCE #testFromValue_Valid
        #void testFromValue_Valid()
        #{
        #    System.TypeCode typeCode = CLRInterop::parseClrEnum('System.TypeCode','Empty');
        #    System.TypeCode expected = CLRInterop::parseClrEnum('System.TypeCode','Boolean');
        #    System.Object   actual;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    actual = SysCLREnum::fromValue(typeCode.GetType(), 3);
        #
        #    this.assertTrue(actual.Equals(expected));
        #}
      ENDSOURCE
      SOURCE #testGetName
        #void testGetName()
        #{
        #    SysCLREnum enum = SysCLREnum::contsruct(CLRInterop::parseClrEnum('System.TypeCode','Empty'));
        #
        #    this.assertEquals('Empty', enum.getName());
        #    this.assertEquals('Boolean', enum.getName(3));
        #}
      ENDSOURCE
      SOURCE #testGetNames
        #void testGetNames()
        #{
        #    SysCLREnum enum = SysCLREnum::contsruct(CLRInterop::parseClrEnum('System.TypeCode','Empty'));
        #    container  expected = ['Empty','Object','DBNull','Boolean','Char','SByte','Byte','Int16','UInt16','Int32','UInt32','Int64','UInt64','Single','Double','Decimal','DateTime','String'];
        #
        #    this.assertEquals(expected, enum.getNames());
        #}
      ENDSOURCE
      SOURCE #testGetValue
        #void testGetValue()
        #{
        #    SysCLREnum enum = SysCLREnum::contsruct(CLRInterop::parseClrEnum('System.TypeCode','Boolean'));
        #
        #    this.assertEquals(3, enum.getValue());
        #}
      ENDSOURCE
      SOURCE #testGetValues
        #void testGetValues()
        #{
        #    SysCLREnum enum = SysCLREnum::contsruct(CLRInterop::parseClrEnum('System.TypeCode','Empty'));
        #    container  expected = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18];
        #
        #    this.assertEquals(expected, enum.getValues());
        #}
      ENDSOURCE
      SOURCE #testIsDefined_Name
        #void testIsDefined_Name()
        #{
        #    SysCLREnum enum = SysCLREnum::contsruct(CLRInterop::parseClrEnum('System.TypeCode','Boolean'));
        #
        #    this.assertTrue(enum.isDefined('Byte'));
        #
        #    this.assertFalse(enum.isDefined('byte'));
        #    this.assertFalse(enum.isDefined('BYTE'));
        #    this.assertFalse(enum.isDefined('System.TypeCode'));
        #
        #}
      ENDSOURCE
      SOURCE #testIsDefined_Value
        #void testIsDefined_Value()
        #{
        #    SysCLREnum enum = SysCLREnum::contsruct(CLRInterop::parseClrEnum('System.TypeCode','Boolean'));
        #
        #    this.assertTrue(enum.isDefined(2));
        #
        #    this.assertFalse(enum.isDefined(42));
        #}
      ENDSOURCE
      SOURCE #testName
        #void testName()
        #{
        #    this.assertEquals('Boolean', SysCLREnum::name(CLRInterop::parseClrEnum('System.TypeCode','Boolean')));
        #}
      ENDSOURCE
      SOURCE #testNew
        #void testNew()
        #{
        #    SysCLREnum enum = new SysCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #}
      ENDSOURCE
      SOURCE #testNew_ClrNull
        #void testNew_ClrNull()
        #{
        #    SysCLREnum enum;
        #    ;
        #
        #    this.parmExceptionExpected(true);
        #    enum = new SysCLREnum(CLRInterop::Null('System.TypeCode'));
        #}
      ENDSOURCE
      SOURCE #testNew_NotEnum
        #void testNew_NotEnum()
        #{
        #    System.Object obj;
        #    ;
        #
        #    this.parmExceptionExpected(true);
        #    new SysCLREnum(obj);
        #}
      ENDSOURCE
      SOURCE #testNew_Null
        #void testNew_Null()
        #{
        #    this.parmExceptionExpected(true);
        #    new SysCLREnum(null);
        #}
      ENDSOURCE
      SOURCE #testParse_Name
        #void testParse_Name()
        #{
        #    System.TypeCode typeCode = CLRInterop::parseClrEnum('System.TypeCode','Boolean');
        #    System.Object   actual;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    actual = SysCLREnum::parse(typeCode.GetType(), 'Boolean');
        #
        #    this.assertTrue(actual.Equals(typeCode));
        #}
      ENDSOURCE
      SOURCE #testParse_Value
        #void testParse_Value()
        #{
        #    System.TypeCode typeCode = CLRInterop::parseClrEnum('System.TypeCode','Boolean');
        #    System.Object   actual;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    actual = SysCLREnum::parse(typeCode.GetType(), '3');
        #
        #    this.assertTrue(actual.Equals(typeCode));
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    SysCLREnum sysCLREnum = new SysCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Byte'));
        #    ;
        #
        #    this.assertEquals('Byte', sysCLREnum.toString());
        #}
      ENDSOURCE
      SOURCE #testToStringD
        #void testToStringD()
        #{
        #    SysCLREnum sysCLREnum = new SysCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Byte'));
        #    ;
        #
        #    this.assertEquals('6', sysCLREnum.toString('D'));
        #}
      ENDSOURCE
      SOURCE #testToStringG
        #void testToStringG()
        #{
        #    SysCLREnum sysCLREnum = new SysCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Byte'));
        #    ;
        #
        #    this.assertEquals('Byte', sysCLREnum.toString('G'));
        #}
      ENDSOURCE
      SOURCE #testToStringX
        #void testToStringX()
        #{
        #    SysCLREnum sysCLREnum = new SysCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Byte'));
        #    ;
        #
        #    this.assertEquals('00000006', sysCLREnum.toString('X'));
        #}
      ENDSOURCE
      SOURCE #testValue
        #void testValue()
        #{
        #    this.assertEquals(3, SysCLREnum::value(CLRInterop::parseClrEnum('System.TypeCode','Boolean')));
        #    this.assertEquals(0, SysCLREnum::value(CLRInterop::parseClrEnum('System.TypeCode','Empty')));
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    SysCLREnum enum = SysCLREnum::contsruct(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    SysCLREnumEnumerator enumEnumerator = enum.getEnumerator();
        #    ;
        #
        #    this.assertNotNull(enumEnumerator);
        #    this.assertTrue(SysDictClass::is(enumEnumerator, classnum(SysCLREnumEnumerator)));
        #}
      ENDSOURCE
      SOURCE #testImplementEnumerable
        #void testImplementEnumerable()
        #{
        #    SysDictClass enumClass = new SysDictClass(classnum(SysCLREnum));
        #    ;
        #
        #    this.assertTrue(enumClass.isImplementing(classnum(Enumerable)));
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics Class: SysCLREnumEnumerator unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysCLREnumEnumerator
    PROPERTIES
      Name                #SysCLREnumEnumerator
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #assertCurrentDefined
        #protected void assertCurrentDefined()
        #{
        #    if( !this.isCurrentDefined() )
        #        throw error("The iterator does not designate a valid element.");    // ktd #262
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class SysCLREnumEnumerator implements Enumerator
        #{
        #    SysCLREnum enum;
        #    int        currentIdx;  // 0 -> до первого moveNext, -1 после последнего moveNext
        #
        #    // lazy variables. use only methods to read these.
        #    container  values;
        #    container  names;
        #    int        elements;
        #}
      ENDSOURCE
      SOURCE #current
        #public anytype current()
        #{
        #    anytype ret;
        #
        #    this.assertCurrentDefined();
        #
        #    ret = conpeek(this.values(), currentIdx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentName
        #public str currentName()
        #{
        #    anytype ret;
        #
        #    this.assertCurrentDefined();
        #
        #    ret = conpeek(this.names(), currentIdx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #definitionString
        #public str definitionString()
        #{
        #    System.Type   enumType = enum.type();
        #    System.String enumTypeName;
        #    str           ret;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    enumTypeName = enumType.get_FullName();
        #
        #    ret = enumTypeName;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int estimatedIterations()
        #{
        #    if( !elements )
        #        elements = conlen(this.values());
        #
        #    return elements;
        #}
      ENDSOURCE
      SOURCE #isCurrentDefined
        #protected boolean isCurrentDefined()
        #{
        #    return ( currentIdx > 0 );
        #}
      ENDSOURCE
      SOURCE #moveNext
        #public boolean moveNext()
        #{
        #    if( currentIdx < 0 )
        #    {
        #        return false;
        #    }
        #
        #    if( currentIdx >= this.estimatedIterations() )
        #    {
        #        currentIdx = -1;
        #        return false;
        #    }
        #
        #    currentIdx++;
        #    return true;
        #}
      ENDSOURCE
      SOURCE #names
        #public container names()
        #{
        #    if( !names )
        #        names = enum.getNames();
        #
        #    return names;
        #}
      ENDSOURCE
      SOURCE #new
        #void new(SysCLREnum _enum)
        #{
        #    if( !_enum )
        #        throw error(Error::wrongUseOfFunction(funcname()));
        #
        #    enum = _enum;
        #
        #    this.reset();
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    currentIdx = 0;
        #}
      ENDSOURCE
      SOURCE #setCurrent
        #// метод билдер: можно вызывать в одной строке после конструктора
        #//
        #// например:
        #//    enumEnumerator = SysCLREnumEnumerator::construct(enum).setCurrent(enumValue);
        #//
        #public SysCLREnumEnumerator setCurrent(int enumValue)
        #{
        #    int pos = confind(this.values(), enumValue);
        #
        #    if( pos )
        #    {
        #        currentIdx = pos;
        #    }
        #    else
        #    {
        #        // не найдено -> больше элементов возвращаться не будет
        #        currentIdx = -1;
        #    }
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #toString
        #// метод использует знание о внутреннем устройстве класса
        #public str toString(int maxElements = 10)
        #{
        #    str         ret;
        #    int         i;
        #    TextBuffer  text;
        #
        #    str elementString(int idx)
        #    {
        #        return strfmt('%1=%2',
        #                conpeek(this.names(), idx),
        #                conpeek(this.values(), idx)
        #        );
        #    }
        #    ;
        #
        #    if( this.isCurrentDefined() )
        #    {
        #        ret = strfmt('[%1]', elementString(currentIdx));
        #    }
        #    else
        #    {
        #        text = new TextBuffer();
        #        text.appendText('{');
        #
        #        for( i=1; i<=maxElements && i<=this.estimatedIterations(); i++ )
        #        {
        #            if( i>1 )
        #                text.appendText(',');
        #
        #            text.appendText(elementString(i));
        #        }
        #
        #        if( maxElements < this.estimatedIterations() )
        #        {
        #            text.appendText(',...');
        #        }
        #
        #        text.appendText('}');
        #        ret = text.getText();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #values
        #public container values()
        #{
        #    if( !values )
        #        values = enum.getValues();
        #
        #    return values;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysCLREnumEnumerator construct(SysCLREnum enum)
        #{
        #    SysCLREnumEnumerator ret = new SysCLREnumEnumerator(enum);
        #    ;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #newFromCLREnum
        #public static SysCLREnumEnumerator newFromCLREnum(System.Enum _enum)
        #{
        #    SysCLREnum           enum = SysCLREnum::contsruct(_enum);
        #    SysCLREnumEnumerator ret  = SysCLREnumEnumerator::construct(enum);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #newFromCLRType
        #public static SysCLREnumEnumerator newFromCLRType(System.Type _type)
        #{
        #    SysCLREnum           enum = SysCLREnum::newFromIdx(_type, 0);
        #    SysCLREnumEnumerator ret  = SysCLREnumEnumerator::construct(enum);
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics Class: SysCLREnumEnumeratorTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysCLREnumEnumeratorTest
    PROPERTIES
      Name                #SysCLREnumEnumeratorTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class SysCLREnumEnumeratorTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testConstruct
        #void testConstruct()
        #{
        #    SysCLREnum           enum           = SysCLREnum::contsruct(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::construct(enum);
        #    ;
        #
        #    this.assertNotNull(enumEnumerator);
        #}
      ENDSOURCE
      SOURCE #testConstruct_Null
        #void testConstruct_Null()
        #{
        #    this.parmExceptionExpected(true);
        #
        #    SysCLREnumEnumerator::construct(null);
        #}
      ENDSOURCE
      SOURCE #testCurrent
        #void testCurrent()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    ;
        #
        #    enumEnumerator.moveNext();
        #    enumEnumerator.moveNext();
        #    enumEnumerator.moveNext();
        #    enumEnumerator.moveNext();
        #
        #    this.assertEquals(3, enumEnumerator.current());
        #}
      ENDSOURCE
      SOURCE #testCurrent_After
        #void testCurrent_After()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    int dummy;
        #    ;
        #
        #    while( enumEnumerator.moveNext() )
        #    {
        #        dummy = 0; // to avoid the 'Empty compound statement' warning
        #    }
        #
        #    this.parmExceptionExpected(true);
        #    enumEnumerator.current();
        #}
      ENDSOURCE
      SOURCE #testCurrent_Before
        #void testCurrent_Before()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    ;
        #
        #    this.parmExceptionExpected(true);
        #    enumEnumerator.current();
        #}
      ENDSOURCE
      SOURCE #testDefinitionString
        #void testDefinitionString()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    ;
        #
        #    this.assertEquals('System.TypeCode', enumEnumerator.definitionString());
        #
        #}
      ENDSOURCE
      SOURCE #testEstimatedIterations
        #void testEstimatedIterations()
        #{
        #    SysCLREnum           enum           = SysCLREnum::contsruct(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::construct(enum);
        #    ;
        #
        #    this.assertEquals(18, enumEnumerator.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testImplementEnumerator
        #void testImplementEnumerator()
        #{
        #    SysDictClass enumClass = new SysDictClass(classnum(SysCLREnumEnumerator));
        #    ;
        #
        #    this.assertTrue(enumClass.isImplementing(classnum(Enumerator)));
        #}
      ENDSOURCE
      SOURCE #testNames
        #void testNames()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.StringSplitOptions','None'));
        #    ;
        #
        #    this.assertEquals(['None','RemoveEmptyEntries'], enumEnumerator.names());
        #}
      ENDSOURCE
      SOURCE #testNewCLREnum
        #void testNewCLREnum()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    ;
        #
        #    this.assertNotNull(enumEnumerator);
        #}
      ENDSOURCE
      SOURCE #testNewCLREnum_Null
        #void testNewCLREnum_Null()
        #{
        #    this.parmExceptionExpected(true);
        #    SysCLREnumEnumerator::newFromCLREnum(CLRInterop::Null('System.TypeCode'));
        #}
      ENDSOURCE
      SOURCE #testNewCLRType
        #void testNewCLRType()
        #{
        #    System.TypeCode      typeCode       = CLRInterop::parseClrEnum('System.TypeCode','Empty');
        #    SysCLREnumEnumerator enumEnumerator;
        #    ;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    enumEnumerator = SysCLREnumEnumerator::newFromCLRType(typeCode.GetType());
        #
        #    this.assertNotNull(enumEnumerator);
        #}
      ENDSOURCE
      SOURCE #testNewCLRType_Null
        #void testNewCLRType_Null()
        #{
        #    this.parmExceptionExpected(true);
        #    SysCLREnumEnumerator::newFromCLRType(CLRInterop::Null('System.TypeCode'));
        #}
      ENDSOURCE
      SOURCE #testReset
        #void testReset()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    ;
        #
        #    enumEnumerator.moveNext();
        #    enumEnumerator.moveNext();
        #    enumEnumerator.moveNext();
        #    enumEnumerator.moveNext();
        #
        #    enumEnumerator.reset();
        #    enumEnumerator.moveNext();
        #
        #    this.assertEquals('[Empty=0]', enumEnumerator.toString());
        #}
      ENDSOURCE
      SOURCE #testReset_After
        #void testReset_After()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    int dummy;
        #    ;
        #
        #    while( enumEnumerator.moveNext() )
        #    {
        #        dummy = 0; // to avoid the 'Empty compound statement' warning
        #    }
        #
        #    enumEnumerator.reset();
        #    enumEnumerator.moveNext();
        #
        #    this.assertEquals('[Empty=0]', enumEnumerator.toString());
        #}
      ENDSOURCE
      SOURCE #testReset_Before
        #void testReset_Before()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    int dummy;
        #    ;
        #
        #    while( enumEnumerator.moveNext() )
        #    {
        #        dummy = 0; // to avoid the 'Empty compound statement' warning
        #    }
        #
        #    enumEnumerator.reset();
        #    enumEnumerator.moveNext();
        #
        #    this.assertEquals('[Empty=0]', enumEnumerator.toString());
        #}
      ENDSOURCE
      SOURCE #testSetCurrent
        #void testSetCurrent()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    int value = SysCLREnum::value(CLRInterop::parseClrEnum('System.TypeCode','Int32')); // = 9
        #    ;
        #
        #    enumEnumerator.moveNext();
        #    enumEnumerator.moveNext();
        #
        #    enumEnumerator.setCurrent(value);
        #
        #    this.assertEquals(value, enumEnumerator.current());
        #}
      ENDSOURCE
      SOURCE #testToMoveNext
        #void testToMoveNext()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    ;
        #
        #    enumEnumerator.moveNext();
        #    enumEnumerator.moveNext();
        #    enumEnumerator.moveNext();
        #    enumEnumerator.moveNext();
        #
        #    this.assertEquals('[Boolean=3]', enumEnumerator.toString());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    ;
        #
        #    enumEnumerator.moveNext();
        #    enumEnumerator.moveNext();
        #    enumEnumerator.moveNext();
        #    enumEnumerator.moveNext();
        #
        #    this.assertEquals('[Boolean=3]', enumEnumerator.toString());
        #}
      ENDSOURCE
      SOURCE #testToString_After
        #void testToString_After()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.StringSplitOptions','None'));
        #    int dummy;
        #    ;
        #
        #    while( enumEnumerator.moveNext() )
        #    {
        #        dummy = 0; // to avoid the 'Empty compound statement' warning
        #    }
        #
        #    this.assertEquals('{None=0,RemoveEmptyEntries=1}', enumEnumerator.toString());
        #}
      ENDSOURCE
      SOURCE #testToString_After_AllElements
        #void testToString_After_AllElements()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    str expected = '{Empty=0,Object=1,DBNull=2,Boolean=3,Char=4,SByte=5,Byte=6,Int16=7,UInt16=8,Int32=9,UInt32=10,Int64=11,UInt64=12,Single=13,Double=14,Decimal=15,DateTime=16,String=18}';
        #    int dummy;
        #    ;
        #
        #    while( enumEnumerator.moveNext() )
        #    {
        #        dummy = 0; // to avoid the 'Empty compound statement' warning
        #    }
        #
        #    this.assertEquals(expected, enumEnumerator.toString(maxint()));
        #}
      ENDSOURCE
      SOURCE #testToString_After_MaxElements
        #void testToString_After_MaxElements()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    int dummy;
        #    ;
        #
        #    while( enumEnumerator.moveNext() )
        #    {
        #        dummy = 0; // to avoid the 'Empty compound statement' warning
        #    }
        #
        #    this.assertEquals('{Empty=0,Object=1,DBNull=2,...}', enumEnumerator.toString(3));
        #}
      ENDSOURCE
      SOURCE #testToString_Before
        #void testToString_Before()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.StringSplitOptions','None'));
        #    ;
        #
        #    this.assertEquals('{None=0,RemoveEmptyEntries=1}', enumEnumerator.toString());
        #}
      ENDSOURCE
      SOURCE #testToString_Before_AllElements
        #void testToString_Before_AllElements()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    str expected = '{Empty=0,Object=1,DBNull=2,Boolean=3,Char=4,SByte=5,Byte=6,Int16=7,UInt16=8,Int32=9,UInt32=10,Int64=11,UInt64=12,Single=13,Double=14,Decimal=15,DateTime=16,String=18}';
        #    ;
        #
        #    this.assertEquals(expected, enumEnumerator.toString(maxint()));
        #}
      ENDSOURCE
      SOURCE #testToString_Before_MaxElements
        #void testToString_Before_MaxElements()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.TypeCode','Int32'));
        #    ;
        #
        #    this.assertEquals('{Empty=0,Object=1,DBNull=2,...}', enumEnumerator.toString(3));
        #}
      ENDSOURCE
      SOURCE #testValues
        #void testValues()
        #{
        #    SysCLREnumEnumerator enumEnumerator = SysCLREnumEnumerator::newFromCLREnum(CLRInterop::parseClrEnum('System.StringSplitOptions','None'));
        #    ;
        #
        #    this.assertEquals([0,1], enumEnumerator.values());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics Project : SysCLREnum unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #SysCLREnum
   SHARED
  PROPERTIES
    Name                #SysCLREnum
  ENDPROPERTIES
  
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50008
      NODETYPE 329
      NAME #SysCLREnum
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50009
      NODETYPE 329
      NAME #SysCLREnumTest
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50010
      NODETYPE 329
      NAME #SysCLREnumEnumerator
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50011
      NODETYPE 329
      NAME #SysCLREnumEnumeratorTest
    ENDNODE
  ENDPROJECT
  

***Element: END
